c	Example of a 2nd order Runge Kutta program to integrate x'' + x = 0
c
c	CTK, 11/2011

	program rungekutta2
		implicit none
		integer ndim
		parameter(ndim = 2)
		
		
		double precision x(ndim), t, dt
		
		double precision x0, v0, energy
		
		integer i, nsteps
		
		print*, 'Solve x" + x = 0 using RK2'
		print*, 'Enter x0'
		read*, x0
		print*, 'Enter v0'
		read*, v0
		
		x(1) = x0
		x(2) = v0
		t = 0
		
		print*, 'Enter number of steps'
		read*, nsteps
		print*, 'Choose dt'
		read*, dt
		
		
		open(unit=1, file = 'circle.txt')
		write(1,*), '# generated by rk2.f'
		write(1,*), '# t, x, v, energy = x**2 + v**2'
		write(1,*), t, x(1), x(2), energy(x)
		do i = 1,nsteps
			call RK2(ndim, x, t, dt)
			t = t + dt
			write(1,*), t, x(1), x(2), energy(x)
		end do
		
		print*, 'Data output to circle.txt'
				
		close(1)
		


	end program
	
c	outputs the "energy" = v^2 + x^2
c	energy should be conserved in the orbit
c	
c	input:  x(2) : vector of (x v)
c	output:  energy = x**2 + v**2
	
	double precision function energy(x)
		implicit none
		double precision x(2)
		
		energy = x(1)**2 + x(2)**2
		return
	end

c	Subroutine RK2
c	General subroutine to take a time step using RK2
c	x' = f(x, t)
c	k1 = dt f(x_i, t)
c	k2 = dt f(x_i + k1, t+dt)
c	x_i+1 = x_i + 0.5*(k1+k2)
c
c	input: n : number of dimensions
c	       x : vector with dimension n to be evolved
c	       t : "time", i.e., independent variable
c	output: x: new vector at the next time step (over-writes initial vector)
	
	subroutine RK2(n, x, t, dt)
		implicit none
		
		integer n
		double precision x(n), t, dt
		
		double precision k1(n), k2(n)

		double precision xdum(n) !dummy variable to evaluate function at
		integer i

		do i=1,n
			xdum(i) = x(i)
		end do
		call rkstep(n, xdum, t, dt, k1) !for this case use 2d

		do i=1,n
			xdum(i) = x(i) + k1(i)
		end do
		call rkstep(n, xdum, t+dt, dt, k2)
		
		do i=1,n
			x(i) = x(i) + 0.5*(k1(i)+k2(i))
		end do
		
		return
	end
	
c	Subroutine rkstep
c	takes a step in any generic Runge Kutta scheme.
c	Thus, it needs an input x that takes into account the Runge Kutta scheme
c
c	input:  n : number of dimensions
c	        x : value of the dependent variable according to the step in Runge Kutta Scheme (usually a x + (#)k1 thing)
c	        t : independent variable in Runge Kutta Scheme (t + (#)dt)
c	output: k : vector of k values for the Runge Kutta Scheme

	subroutine rkstep(n, x, t, dt, k)
		implicit none
		integer n, i
		
		double precision x(n), t, dt, k(n)
		
		call dxdt(n, x, t, k)
		
		do i=1,n
			k(i) = dt*k(i)
		end do
		
		return
	end
	
c	Subroutine dxdt
c	Unique to this problem, this function is the right hand side of x' = f(x, t)
c	Here, we work with a 2-d problem, so there is an error trap to make sure we're doing a 2-d Runge Kutta
c	For a different problem, replace dxdt
c
c	x(1)' = x(2)
c	x(2)' = - x(1)
c
c	input:  n : number of dimensions (must equal 2!)
c	        x : 2-D vector with dependent variables
c	        t : independent variable
c	output: k : value of f(x,t), note it needs to be multiplied by dt in the Runge Kutta scheme

	subroutine dxdt(n, x, t, k)
		implicit none
		integer n
		
		double precision x(n), t, k(n)
		
		if(n .ne. 2) then
			print*, 'dxdt only designed for a 2-d problem'
			stop
		end if

		
		
		k(1) = x(2)
		k(2) = - x(1)
		
		return
	end
	
